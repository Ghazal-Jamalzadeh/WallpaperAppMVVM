Set Wallpaper---------------------------------------------------------------------------------------
کد خیلی ساده ای داره

1- manifest
add wallpaper permission
its a normal permission
    <uses-permission android:name="android.permission.SET_WALLPAPER"/>

2- WallpaperManager class
برای ست کردن والپیپر نیاز به این کلاس داریم
میتونیم با تزریق وابستگی بیاریمش داخل صفحه
ولی به عنوان تمرین باشه برای خودتون و با لیزی کار رو پیش میبیریم
    private val wallpaperManager by lazy { WallpaperManager.getInstance(requireContext()) }
راهنمایی:
توی di به صورت ماژول تامینش کنید

                            setWallpaperImg.setOnClickListener {
                                wallpaperManager.setBitmap(imageBitmap)
                                setWallpaperImg.setImageResource(R.drawable.check)
                            }

3- bitmap : convert URL to bitmap & set to Nouri rotateView
والپیپر منیجر به کمک بیت مپ این کار رو انجام میده
بیت مپ تصاویری هستن که توی اندروید وجود دارن
و تمامی تصاویر به واسطه بیت مپ هست که ساخته میشن و نشون داده میشن
ما باید عکسی که از سرور میگیریم رو تبدیل کنیم به بیت مپ
روش های مختلفی برای این کرا وجود داره
ما به کمک کوبل انجامش میدیم
یه روش قدیمی وجود داره به اسم کانکشن منیجر که روش خوبی نیست
استفاده نکنید
از همون کویل استفاده کنید
و url هم به بیت مپ تبدیل میکنه
البته پیکاسو هم میتونست تبدیل به بیت مپ کنه عکسا رو
ولی کویل این کارو با کیفیت خیلی بالاتری انجام میده
برای این کار یک فانکشن مینویسیم

ImageLoader :
مربوط به کویل هست ونیاز به کانتکس دارد

    private fun initRotateView(imageUrl: String) {
        binding.apply {
            lifecycleScope.launch {
                //Create bitmap from image
                val loader = ImageLoader(requireContext())
                val request = ImageRequest.Builder(requireContext())
                    // یو آر ال عکس رو اینجا بهش میدیم
                    خودش دانلود میکنه و توی کش خودش  ذخیره میکنه
                    .data(imageUrl)
                    // استفاده از موارد سخت افزاری و درگیر شدن سخت افزار برای لود تصاویر سنگین
                    .allowHardware(false)
                    .build()
                // در نهایت اگر ریسالت ساکسس بود بیا و درابل رو بساز
                val result = (loader.execute(request) as SuccessResult).drawable
                // در نهایت خیلی راحت به بیت مپ تبدیل کن
                imageBitmap = (result as BitmapDrawable).bitmap
                //Delay
                // یک دیلی میندازیم که خیالمون راحت باشه که بیت مپ ساخته شده
                delay(200)
                //Rotate view
                //چون هندل کردن اینستنس رتیت ویو توی لایف سلیکل فرگمنت خیلی مهمه به صورت جنرال تعریفش میکنیم
                rotateView = RotateView.getInstance(requireContext())!!
                rotateView.apply {
                    setImageWithBitmap(coverImg, imageBitmap)
                    // عکسو از وسط بیاره و بعد ادامه بده
                    center()
                }
                //Hide loading
                زمانی که همه کارامون شد لودینگ رو از بین میبریم
                هر چی حجم عکس بیشتر باشه این فرایند تبدیل به بیت مپ بیشتر طول مبکشه
                                چون حتی دریافت کردنش بیشتر طول میکشه
                loading.isVisible(false, container)
            }
        }
    }

4- activate / de activate  rotate view
    private fun activeRotateView() {
        binding.apply {
            rotateViewImg.apply {
                setOnClickListener {
                // سنسور دیوایس کاربر رو حتما چک کنید که داشته باشه و سالم باشه و این ها
                    if (rotateView.isDeviceSupported()) {
                        isEnabledRotateView = if (isEnabledRotateView.not()) {
                            //فعال کردن روتیت ویو
                            rotateView.registerListener()
                            setBackgroundResource(R.drawable.bg_circle_azure_alpha_selected)
                            true
                        } else {
                            rotateView.unRegisterListener()
                            setBackgroundResource(R.drawable.bg_circle_azure_alpha)
                            false
                        }
                    } else {
                        root.showSnackBar(getString(R.string.notSupportRotateView))
                    }
                }
            }
        }
    }

5- rotate view & lifecycle
    override fun onStop() {
        super.onStop()
        if (this::rotateView.isInitialized)
            rotateView.unRegisterListener()
    }

download wallpaper----------------------------------------------------------------------------------
1- permission
برای دانلود کردن ما اول از همه باید دسترسی داشته باشیم به کارت حافظه
که جزو پرمیشن های خطرناک هم هست

این پرمیشن برای زیر اندروید ۶ هست
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

برای بالاتر از اندروید ۶ باید به صورت ران تایم پرمیشن کار کنیم
و نکته ای که هست اینه که از اندروید ۱۲ به بالا دسترسی به استوریج باز متفاوت شده
باید با اسکوپ ها کار کنید
و اسکوپ هر دسترسی ای برای استوریج رو باید مشخص کنید
ولی ما نمیخوایم از این حالت استفاده کنیم
و عکسی که میخوایم ذخیره کنیم رو میخوایم توی فضای عمومی عکس ها ذخیره کنیم
و چون فضای عمومیه خیلی راحت هم توی گالری نشونش میده و نیازی نیست کار خاصی رو انجام بدیم
و نمیخوایم توی فولدر مخصوص به خودمون ذخیره کنیم
برای همین میایم حالت اسکوپ استوریج رو ایگنور میکنیم
کلا از اندروید ۱۲ این اسکوپ ها اومدن و گفتن هر چیزی رو میخوای باید اسکوپش رو مشخص کنی
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" tools:ignore = "ScopedStorage"/>

برای اندروید ۹ و ۱۰ و ۱۱ هم میتونیم یه حالتی رو در نظر بگیریم
برای حالتی که ما مجبور نیستیم دسترسی های مربوط به اسکوپ رو روی این ها اعمال کنیم
خود گوگل یک کدی رو توی مانیفست اضافه کرده برای این موضوع که خیلی راحت میتونیم ازش استفاده کنیم
        android:requestLegacyExternalStorage="true"
دیگه روی اندروید های ۹ و ۱۰ و ۱۱ هم ارور دسترسی به کارت حافظه رو نخواهیم داشت

2- handle runtime permissions
برای این کار یک کتابخانه ای رو اضافه کردیم
به ایمپورت ها و این ها هم دقت کنید
مثلا مانیفست باید از همون مانیفست اصلی اندروید ایمپورت شه نه اسم پروژه
    private fun requestPermission() {
        lifecycleScope.launch {
            requestPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE).collect {}
        }
    }
توی کالکتش میتونیم بگیم مثلا اگه دسترسی رو داده بود چیکار کن واین ها
کلا میگه عملیات انجام شده یا نه
ولی اینجا ما فقط میخوایم دیالوگ دسترسی رو بهمون نشون بده

یه چیز جالبی که این کتابخونه داره اینه که
لازم نیست هر بار بررسی کنی که آیا کاربر من قبلا دسترسی ها رو داده یا نداده
اگه نداده دیالوگ رو نمایش بده
اینا رو خودش هندل میکنه برعکس کتابخونه های دیگه

3- download image
برای دانلود عکس از متدهای خود اندروید استفاده میکنیم و از هیچ کتابخانه ای استفاده نمیکنیم
عکس به صورت خودکار وارد گالری میشه
بعضی از کدها این کار رو نمیکنن
و خودت باید گالری رو رفرش کنی با کد

دانلود منیجیری که اینجا به کار میبریم توی استاتوس بار نشون میده درصد و این ها رو
کتابخونه های جانبی هم برای این کار وجود داره
مثل prDownloader
که گالری رو باید دستی رفرش کرد توش

    private fun downloadImage(imageFile: String, fileName: String) {

        دانلود منیجر رو از کلاس سیستم سرویس که داخل کانتکس هس میگیریم و تبدیلش میکنیم به دانلود منیجر
        val dm = requireContext().getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager

        برای دانلود نیاز به یو آر آی داریم
        که با یو آر ال فرق داره
        و یک حالت مسیر دهی هست توی اندروید
        val downloadUri = Uri.parse(imageFile)

        ایجاد ریکوعست از دانلود منیجر و یو آر آی رو میدیم بهش
        val request = DownloadManager.Request(downloadUri)

        شروع عملیات دانلود
        مشخص میکنیم که با وای فای و دیتا دانلود رو انجام بده
        request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI or DownloadManager.Request.NETWORK_MOBILE)
             عنوانی که توی نوتیفیکیشن و این ها میبینه
            .setTitle(fileName)
            میم تایپ یعنی چه فرمتیه
            ما image/jpeg میدیم بهش
            .setMimeType(IMAGE_MIME_TYPE)
            میخوان نوتیفیکیشنش رو نشون بدی
            کامپیلیت هم شد بگو. صدا اینا بده
            .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
            اصل کار اینه
            کجا ذخیره کنیم؟
            توی مسیرهای جنرال ذخیره ش میکنیم
            چون اگه توی مسیرهای جنرال نبریم
            اولا ممکنه مشکل آپدیت گالری پیدا کنیم
            و برای دسترسی به فولدرهای خاص باید وارد دردسرهای اسکوپ بشم
            پس برو توی فولدر پیکچرز اندروید
            و خلاصه فایل رو درست کن
            .setDestinationInExternalPublicDir(Environment.DIRECTORY_PICTURES, File.separator + fileName + JPG)

        اینجا میگیم شروع کن دانلود رو
        و آیدی دانلود رو هم از اینجا میگیریم که جلوتر نیاز داریم
        downloadId = dm.enqueue(request)

        پروگرس بار رو هم نشون میدیم
        //Show progress bar
        binding.downloadLoading.apply {
            isVisible = true
            حالت بی نهایت. درصد این ها نشون نده
            isIndeterminate = true
        }

    }

check if downlaod completed using broadcast receivers-----------------------------------------------
حالا از کجا بفهمیم که دانلود تموم شده؟
چون دانلود منیجر و این ها اون لیسنر مربوط به تمام شدن دانلود رو نمیدن
پس باید از برادکست رسیورها استفاده کنیم
چون باید رجسیتر شه برای گوش دادن بهش کلشو برمیگردونیم

    private fun downloadImageCompleted(): BroadcastReceiver {
        این متد معروف آن رسیو رو ایمپلمنت میکنیم
        return object : BroadcastReceiver() {
            override fun onReceive(context: Context, intent: Intent) {

                حالا از کجا بفهمم که دانلود من تموم شده؟
                من نیاز به یک ایدی دارم
                که این آیدی در واقع از همون دانلود منیجر آیدی استفاده میکنه
                و وصل میشه به آیدی دانلود منیجری که بالاتر ساختیم
                بعد میگه هر موقع آیدی این برابر بود با اون آیدی ای که تموم شده بود بهم بگو

                val id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1)
                if (id == downloadId) {
                    binding.apply {
                        downloadLoading.isVisible = false
                        downloadImg.setImageResource(R.drawable.check)
                    }
                }
            }
        }
    }

این تیکه کد رو هم توی آن کریت مینویسیم
که رجسیتر کنیم براد کست رسیور رو
پارامتر اولش همون برادکست رسیوری هست که ساختیم
پارامتر دومش اینتنت یا همون اکشن مورد نظر برای تموم شدن هست

        //Register download broadcast receiver
        requireContext().registerReceiver(downloadImageCompleted(), IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE))

