BaseFragment----------------------------------------------------------------------------------------
اگه یادتون بیاد توی پروژه استور ما توی هر فرگمنت میومدیم تکه کد مربوط به بایندینگ رو تکرار میکردیم
(چون سینگل اکیتیوتی کار میکنیم این رو توی بیس فرگمنت میزنیم. اگه با اکتیویتی کار میکنید خودتون بسط بدید.)

حالا ما میایم اینو به صورت جنرال تر مینویسیم و فقط بایندینگمون رو لازمه که بهش معرفی کنیم

در مرحله اول ما نیاز به بایندینگ داریم
ولی بایندینگ کدوم صفحه رو بهش بدیم؟
اسپلش؟ لاگین؟ هوم؟ نمیشه که
پس باید داینامیک فکر کنم
روش های مختلفی داره این پیاده سازی
ما اینجا از یک روش کوتاه و راحت استفاده میکنیم

خیلی راحت میتونم بیام زمانی که دارم از این بیس ارث بری میکنم
اون بایندینگ رو مشخص کنم و بر اساس اون بسازم
بایندینگ من از نوع ویو بایندینگ باشه
یعنی دیتاتایپ جنریک رو محدود میکنیم

تمام بایندینگ ها داخل آن کریت ویو اعمال میشه

ما دو تا متغیر داشتیم
یکی اون که آندرلاین داشت که میومد تمام وضعیت های مختلف بایندینگ رو داخل خودش نگه میداشت
متغیر دوم که آندرلاین نداشت به خاطر انکپسولیشن بود
و نقش getter رو داشت

توی این روش جدید به یک چیز دیگه هم نیاز دارم
اون چیز چیه؟
به یک inflater نیاز دارم
که این عملیات چسبودن ویو به صفحه توسط این اینفلیتر انجام میشه
چون ما نسبت به هر صفحه این اینفلیترمون متفاوت میشه
میایم ابسترکت مینویسیمش که پیاده سازیش به صورت اختصاصی برای هر صفحه متفاوت باشه
پس باید یک متغیری داشته باشیم که بتونیم این اینفلیتر رو به صورت جنرال دربافت کنیم
پروتکتد میکنیم که فقط فرزندان دسترسی داشته باشن
پیاده سازیشم مشخص نیست پس ابسترکته


requireNotNull(_binding)
به جای اینکه بیایم !! یا ؟ بذاریم برای هندل کردن نال
میایم از این کد خوشگل کاتلینی استفاده میکنیم
که خودش هندل کنه

invoke
به معنی فراخوانی فانکشن است
که توی ورودی پارامتر ورودش رو میدیم
دو خط کد زیر احتمالا معادل هم هستن
        _binding = bindingInflater.invoke(inflater)
        _binding = bindingInflater(inflater)


abstract class BaseFragment<T : ViewBinding> : Fragment() {

    //Binding
    protected abstract val bindingInflater: (inflater: LayoutInflater) -> T
    private var _binding: T? = null
    protected val binding: T get() = requireNotNull(_binding)

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        _binding = bindingInflater.invoke(inflater)
        return binding.root
    }

    به جای onDestroyFragment از onDestroyView استفاده میکنیم
    برای از بین بردن ویوی مربوط به فرگمنت
    اینجا برای نال کردن بایندینگ بهتره و اختصاصی تره
    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }